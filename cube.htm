<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebGL Rotating Cube</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
</head>
<body>
    <canvas id="glCanvas"></canvas>
    <script>
        let gl;
        let program;
        let vertexBuffer;
        let colorBuffer;
        let indexBuffer;
        let mvMatrix = new Float32Array(16);
        let pMatrix = new Float32Array(16);
        let rotation = 0;

        const vsSource = `
            attribute vec3 aVertexPosition;
            attribute vec3 aVertexColor;
            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;
            varying vec3 vColor;
            void main(void) {
                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
                vColor = aVertexColor;
            }
        `;

        const fsSource = `
            precision mediump float;
            varying vec3 vColor;
            void main(void) {
                gl_FragColor = vec4(vColor, 1.0);
            }
        `;

        function initGL(canvas) {
            try {
                gl = canvas.getContext("webgl");
                gl.viewportWidth = canvas.width;
                gl.viewportHeight = canvas.height;
            } catch(e) {}
            if (!gl) {
                alert("Could not initialize WebGL.");
            }
        }

        function initShaders() {
            const vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, vsSource);
            gl.compileShader(vertexShader);

            const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, fsSource);
            gl.compileShader(fragmentShader);

            program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                alert("Could not initialize shaders");
            }

            gl.useProgram(program);

            program.vertexPositionAttribute = gl.getAttribLocation(program, "aVertexPosition");
            gl.enableVertexAttribArray(program.vertexPositionAttribute);

            program.vertexColorAttribute = gl.getAttribLocation(program, "aVertexColor");
            gl.enableVertexAttribArray(program.vertexColorAttribute);

            program.pMatrixUniform = gl.getUniformLocation(program, "uPMatrix");
            program.mvMatrixUniform = gl.getUniformLocation(program, "uMVMatrix");
        }

        function initBuffers() {
            vertexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            const vertices = [
                // Front face
                -1.0, -1.0,  1.0,
                 1.0, -1.0,  1.0,
                 1.0,  1.0,  1.0,
                -1.0,  1.0,  1.0,
                // Back face
                -1.0, -1.0, -1.0,
                -1.0,  1.0, -1.0,
                 1.0,  1.0, -1.0,
                 1.0, -1.0, -1.0,
                // Top face
                -1.0,  1.0, -1.0,
                -1.0,  1.0,  1.0,
                 1.0,  1.0,  1.0,
                 1.0,  1.0, -1.0,
                // Bottom face
                -1.0, -1.0, -1.0,
                 1.0, -1.0, -1.0,
                 1.0, -1.0,  1.0,
                -1.0, -1.0,  1.0,
                // Right face
                 1.0, -1.0, -1.0,
                 1.0,  1.0, -1.0,
                 1.0,  1.0,  1.0,
                 1.0, -1.0,  1.0,
                // Left face
                -1.0, -1.0, -1.0,
                -1.0, -1.0,  1.0,
                -1.0,  1.0,  1.0,
                -1.0,  1.0, -1.0
            ];
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
            vertexBuffer.itemSize = 3;
            vertexBuffer.numItems = 24;

            colorBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
            const colors = [
                [1.0, 0.0, 0.0, 1.0], // Front face
                [1.0, 1.0, 0.0, 1.0], // Back face
                [0.0, 1.0, 0.0, 1.0], // Top face
                [1.0, 0.5, 0.5, 1.0], // Bottom face
                [1.0, 0.0, 1.0, 1.0], // Right face
                [0.0, 0.0, 1.0, 1.0]  // Left face
            ];
            let unpackedColors = [];
            for (let i in colors) {
                let color = colors[i];
                for (let j=0; j < 4; j++) {
                    unpackedColors = unpackedColors.concat(color);
                }
            }
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
            colorBuffer.itemSize = 4;
            colorBuffer.numItems = 24;

            indexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            const cubeVertexIndices = [
                0, 1, 2,      0, 2, 3,    // Front face
                4, 5, 6,      4, 6, 7,    // Back face
                8, 9, 10,     8, 10, 11,  // Top face
                12, 13, 14,   12, 14, 15, // Bottom face
                16, 17, 18,   16, 18, 19, // Right face
                20, 21, 22,   20, 22, 23  // Left face
            ];
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
            indexBuffer.itemSize = 1;
            indexBuffer.numItems = 36;
        }

        function drawScene() {
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

            loadIdentity(mvMatrix);
            translate(mvMatrix, [0.0, 0.0, -5.0]);
            rotate(mvMatrix, rotation, [1, 1, 1]);

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.vertexAttribPointer(program.vertexPositionAttribute, vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);

            gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
            gl.vertexAttribPointer(program.vertexColorAttribute, colorBuffer.itemSize, gl.FLOAT, false, 0, 0);

            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            setMatrixUniforms();
            gl.drawElements(gl.TRIANGLES, indexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        }

        function animate() {
            rotation += 0.01;
            drawScene();
            requestAnimationFrame(animate);
        }

        function setMatrixUniforms() {
            gl.uniformMatrix4fv(program.pMatrixUniform, false, pMatrix);
            gl.uniformMatrix4fv(program.mvMatrixUniform, false, mvMatrix);
        }

        function loadIdentity(m) {
            m[0] = 1; m[1] = 0; m[2] = 0; m[3] = 0;
            m[4] = 0; m[5] = 1; m[6] = 0; m[7] = 0;
            m[8] = 0; m[9] = 0; m[10] = 1; m[11] = 0;
            m[12] = 0; m[13] = 0; m[14] = 0; m[15] = 1;
        }

        function translate(m, v) {
            m[12] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12];
            m[13] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13];
            m[14] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14];
            m[15] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15];
        }

        function rotate(m, angle, axis) {
            let x = axis[0], y = axis[1], z = axis[2];
            let len = Math.sqrt(x*x + y*y + z*z);
            let s, c, t;
            let a00, a01, a02, a03;
            let a10, a11, a12, a13;
            let a20, a21, a22, a23;
            let b00, b01, b02;
            let b10, b11, b12;
            let b20, b21, b22;

            if (Math.abs(len) < 0.000001) { return; }

            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;

            s = Math.sin(angle);
            c = Math.cos(angle);
            t = 1 - c;

            a00 = m[0]; a01 = m[1]; a02 = m[2]; a03 = m[3];
            a10 = m[4]; a11 = m[5]; a12 = m[6]; a13 = m[7];
            a20 = m[8]; a21 = m[9]; a22 = m[10]; a23 = m[11];

            b00 = x*x*t + c; b01 = y*x*t + z*s; b02 = z*x*t - y*s;
            b10 = x*y*t - z*s; b11 = y*y*t + c; b12 = z*y*t + x*s;
            b20 = x*z*t + y*s; b21 = y*z*t - x*s; b22 = z*z*t + c;

            m[0] = a00*b00 + a10*b01 + a20*b02;
            m[1] = a01*b00 + a11*b01 + a21*b02;
            m[2] = a02*b00 + a12*b01 + a22*b02;
            m[3] = a03*b00 + a13*b01 + a23*b02;
            m[4] = a00*b10 + a10*b11 + a20*b12;
            m[5] = a01*b10 + a11*b11 + a21*b12;
            m[6] = a02*b10 + a12*b11 + a22*b12;
            m[7] = a03*b10 + a13*b11 + a23*b12;
            m[8] = a00*b20 + a10*b21 + a20*b22;
            m[9] = a01*b20 + a11*b21 + a21*b22;
            m[10] = a02*b20 + a12*b21 + a22*b22;
            m[11] = a03*b20 + a13*b21 + a23*b22;
        }

        function perspective(fovy, aspect, near, far, m) {
            const f = 1.0 / Math.tan(fovy / 2);
            const nf = 1 / (near - far);
            m[0] = f / aspect;
            m[1] = 0;
            m[2] = 0;
            m[3] = 0;
            m[4] = 0;
            m[5] = f;
            m[6] = 0;
            m[7] = 0;
            m[8] = 0;
            m[9] = 0;
            m[10] = (far + near) * nf;
            m[11] = -1;
            m[12] = 0;
            m[13] = 0;
            m[14] = (2 * far * near) * nf;
            m[15] = 0;
        }

        function webGLStart() {
            const canvas = document.getElementById("glCanvas");
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            initGL(canvas);
            initShaders();
            initBuffers();

            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.enable(gl.DEPTH_TEST);

            animate();
        }

        window.onload = webGLStart;
    </script>
</body>
</html>
